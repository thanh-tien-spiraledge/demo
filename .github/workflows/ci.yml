name: Auto PR & Build Pipeline

on:
  push:
    branches-ignore: [ main, master, staging ]
  pull_request:
    branches: [ main, master ]

jobs:
  auto-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: 'Auto PR: ${{ github.ref_name }}'
        body: |
          ## Auto-generated Pull Request
          
          This PR was automatically created from branch: **${{ github.ref_name }}**
          
          ### Changes:
          - Auto-generated PR from feature branch
          - Ready for review and merge
          
          ### Branch Info:
          - Source: `${{ github.ref_name }}`
          - Target: `main`
          
        base: main
        delete-branch: false
        
  build:
    runs-on: ubuntu-latest
    needs: auto-pr
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Build application
      run: |
        echo "Building application..."
        echo "Checking Python files..."
        
        # List all Python files
        find . -name "*.py" -type f
        
        # Check if setup.py exists
        if [ -f setup.py ]; then
          echo "Building with setup.py..."
          python setup.py build
        elif [ -f pyproject.toml ]; then
          echo "Building with poetry..."
          pip install poetry
          poetry build
        elif [ -f requirements.txt ]; then
          echo "Installing dependencies and checking syntax..."
          pip install -r requirements.txt
          python -m py_compile *.py
        else
          echo "Simple Python project - checking syntax..."
          # Check Python syntax for all .py files
          for file in *.py; do
            if [ -f "$file" ]; then
              echo "Checking syntax: $file"
              python -m py_compile "$file"
            fi
          done
          
          # Run a simple test
          echo "Running simple test..."
          python demo1.py
        fi
        
        echo "Build completed successfully!"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/
